// Code generated by mockery v2.51.0. DO NOT EDIT.

package replication

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/goharbor/harbor/src/controller/replication/model"

	regmodel "github.com/goharbor/harbor/src/pkg/reg/model"
)

// flowController is an autogenerated mock type for the Controller type
type flowController struct {
	mock.Mock
}

// Start provides a mock function with given fields: ctx, executionID, policy, resource
func (_m *flowController) Start(ctx context.Context, executionID int64, policy *model.Policy, resource *regmodel.Resource) error {
	ret := _m.Called(ctx, executionID, policy, resource)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *model.Policy, *regmodel.Resource) error); ok {
		r0 = rf(ctx, executionID, policy, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newFlowController creates a new instance of flowController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newFlowController(t interface {
	mock.TestingT
	Cleanup(func())
}) *flowController {
	mock := &flowController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
