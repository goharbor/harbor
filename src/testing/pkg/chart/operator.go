// Code generated by mockery v2.51.0. DO NOT EDIT.

package chart

import (
	mock "github.com/stretchr/testify/mock"
	chart "helm.sh/helm/v3/pkg/chart"

	pkgchart "github.com/goharbor/harbor/src/pkg/chart"
)

// Operator is an autogenerated mock type for the Operator type
type Operator struct {
	mock.Mock
}

// GetData provides a mock function with given fields: content
func (_m *Operator) GetData(content []byte) (*chart.Chart, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 *chart.Chart
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*chart.Chart, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func([]byte) *chart.Chart); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chart.Chart)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetails provides a mock function with given fields: content
func (_m *Operator) GetDetails(content []byte) (*pkgchart.VersionDetails, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for GetDetails")
	}

	var r0 *pkgchart.VersionDetails
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*pkgchart.VersionDetails, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func([]byte) *pkgchart.VersionDetails); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgchart.VersionDetails)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOperator creates a new instance of Operator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Operator {
	mock := &Operator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
