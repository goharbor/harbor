// Code generated by mockery v2.51.0. DO NOT EDIT.

package immutable

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	selector "github.com/goharbor/harbor/src/lib/selector"
)

// FakeMatcher is an autogenerated mock type for the ImmutableTagMatcher type
type FakeMatcher struct {
	mock.Mock
}

// Match provides a mock function with given fields: ctx, pid, c
func (_m *FakeMatcher) Match(ctx context.Context, pid int64, c selector.Candidate) (bool, error) {
	ret := _m.Called(ctx, pid, c)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, selector.Candidate) (bool, error)); ok {
		return rf(ctx, pid, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, selector.Candidate) bool); ok {
		r0 = rf(ctx, pid, c)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, selector.Candidate) error); ok {
		r1 = rf(ctx, pid, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFakeMatcher creates a new instance of FakeMatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeMatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeMatcher {
	mock := &FakeMatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
