// Code generated by mockery v2.51.0. DO NOT EDIT.

package parser

import (
	context "context"

	artifact "github.com/goharbor/harbor/src/pkg/artifact"

	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// Parse provides a mock function with given fields: ctx, _a1, manifest
func (_m *Parser) Parse(ctx context.Context, _a1 *artifact.Artifact, manifest []byte) error {
	ret := _m.Called(ctx, _a1, manifest)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *artifact.Artifact, []byte) error); ok {
		r0 = rf(ctx, _a1, manifest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
