// Code generated by mockery v2.51.0. DO NOT EDIT.

package jobmonitor

import (
	context "context"

	jobmonitor "github.com/goharbor/harbor/src/pkg/jobmonitor"
	mock "github.com/stretchr/testify/mock"
)

// PoolManager is an autogenerated mock type for the PoolManager type
type PoolManager struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, monitorClient
func (_m *PoolManager) List(ctx context.Context, monitorClient jobmonitor.JobServiceMonitorClient) ([]*jobmonitor.WorkerPool, error) {
	ret := _m.Called(ctx, monitorClient)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*jobmonitor.WorkerPool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jobmonitor.JobServiceMonitorClient) ([]*jobmonitor.WorkerPool, error)); ok {
		return rf(ctx, monitorClient)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jobmonitor.JobServiceMonitorClient) []*jobmonitor.WorkerPool); ok {
		r0 = rf(ctx, monitorClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*jobmonitor.WorkerPool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, jobmonitor.JobServiceMonitorClient) error); ok {
		r1 = rf(ctx, monitorClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPoolManager creates a new instance of PoolManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolManager {
	mock := &PoolManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
