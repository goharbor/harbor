// Code generated by mockery v2.51.0. DO NOT EDIT.

package jobmonitor

import (
	work "github.com/gocraft/work"
	mock "github.com/stretchr/testify/mock"
)

// JobServiceMonitorClient is an autogenerated mock type for the JobServiceMonitorClient type
type JobServiceMonitorClient struct {
	mock.Mock
}

// Queues provides a mock function with no fields
func (_m *JobServiceMonitorClient) Queues() ([]*work.Queue, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Queues")
	}

	var r0 []*work.Queue
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*work.Queue, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*work.Queue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*work.Queue)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkerObservations provides a mock function with no fields
func (_m *JobServiceMonitorClient) WorkerObservations() ([]*work.WorkerObservation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WorkerObservations")
	}

	var r0 []*work.WorkerObservation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*work.WorkerObservation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*work.WorkerObservation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*work.WorkerObservation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkerPoolHeartbeats provides a mock function with no fields
func (_m *JobServiceMonitorClient) WorkerPoolHeartbeats() ([]*work.WorkerPoolHeartbeat, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WorkerPoolHeartbeats")
	}

	var r0 []*work.WorkerPoolHeartbeat
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*work.WorkerPoolHeartbeat, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*work.WorkerPoolHeartbeat); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*work.WorkerPoolHeartbeat)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJobServiceMonitorClient creates a new instance of JobServiceMonitorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobServiceMonitorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobServiceMonitorClient {
	mock := &JobServiceMonitorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
