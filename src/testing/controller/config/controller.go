// Code generated by mockery v2.51.0. DO NOT EDIT.

package config

import (
	context "context"

	models "github.com/goharbor/harbor/src/lib/config/models"
	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// AllConfigs provides a mock function with given fields: ctx
func (_m *Controller) AllConfigs(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllConfigs")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertForGet provides a mock function with given fields: ctx, cfg, internal
func (_m *Controller) ConvertForGet(ctx context.Context, cfg map[string]interface{}, internal bool) (map[string]*models.Value, error) {
	ret := _m.Called(ctx, cfg, internal)

	if len(ret) == 0 {
		panic("no return value specified for ConvertForGet")
	}

	var r0 map[string]*models.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, bool) (map[string]*models.Value, error)); ok {
		return rf(ctx, cfg, internal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, bool) map[string]*models.Value); ok {
		r0 = rf(ctx, cfg, internal)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*models.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, bool) error); ok {
		r1 = rf(ctx, cfg, internal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverwriteConfig provides a mock function with given fields: ctx
func (_m *Controller) OverwriteConfig(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OverwriteConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserConfigs provides a mock function with given fields: ctx, conf
func (_m *Controller) UpdateUserConfigs(ctx context.Context, conf map[string]interface{}) error {
	ret := _m.Called(ctx, conf)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserConfigs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserConfigs provides a mock function with given fields: ctx
func (_m *Controller) UserConfigs(ctx context.Context) (map[string]*models.Value, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UserConfigs")
	}

	var r0 map[string]*models.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]*models.Value, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]*models.Value); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*models.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
