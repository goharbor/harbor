// Code generated by mockery v2.51.0. DO NOT EDIT.

package securityhub

import (
	context "context"

	model "github.com/goharbor/harbor/src/pkg/securityhub/model"
	mock "github.com/stretchr/testify/mock"

	q "github.com/goharbor/harbor/src/lib/q"

	securityhub "github.com/goharbor/harbor/src/controller/securityhub"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// CountVuls provides a mock function with given fields: ctx, scannerUUID, projectID, tuneCount, query
func (_m *Controller) CountVuls(ctx context.Context, scannerUUID string, projectID int64, tuneCount bool, query *q.Query) (int64, error) {
	ret := _m.Called(ctx, scannerUUID, projectID, tuneCount, query)

	if len(ret) == 0 {
		panic("no return value specified for CountVuls")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, bool, *q.Query) (int64, error)); ok {
		return rf(ctx, scannerUUID, projectID, tuneCount, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, bool, *q.Query) int64); ok {
		r0 = rf(ctx, scannerUUID, projectID, tuneCount, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, bool, *q.Query) error); ok {
		r1 = rf(ctx, scannerUUID, projectID, tuneCount, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVuls provides a mock function with given fields: ctx, scannerUUID, projectID, withTag, query
func (_m *Controller) ListVuls(ctx context.Context, scannerUUID string, projectID int64, withTag bool, query *q.Query) ([]*model.VulnerabilityItem, error) {
	ret := _m.Called(ctx, scannerUUID, projectID, withTag, query)

	if len(ret) == 0 {
		panic("no return value specified for ListVuls")
	}

	var r0 []*model.VulnerabilityItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, bool, *q.Query) ([]*model.VulnerabilityItem, error)); ok {
		return rf(ctx, scannerUUID, projectID, withTag, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, bool, *q.Query) []*model.VulnerabilityItem); ok {
		r0 = rf(ctx, scannerUUID, projectID, withTag, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.VulnerabilityItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, bool, *q.Query) error); ok {
		r1 = rf(ctx, scannerUUID, projectID, withTag, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecuritySummary provides a mock function with given fields: ctx, projectID, options
func (_m *Controller) SecuritySummary(ctx context.Context, projectID int64, options ...securityhub.Option) (*model.Summary, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, projectID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SecuritySummary")
	}

	var r0 *model.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...securityhub.Option) (*model.Summary, error)); ok {
		return rf(ctx, projectID, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...securityhub.Option) *model.Summary); ok {
		r0 = rf(ctx, projectID, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...securityhub.Option) error); ok {
		r1 = rf(ctx, projectID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
