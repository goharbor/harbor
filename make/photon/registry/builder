#!/bin/bash

set +e

if [ -z $1 ]; then
  error "Please set the 'version' variable"
  exit 1
fi

VERSION="$1"

set -e

# the temp folder to store binary file...
mkdir -p binary
rm -rf binary/registry || true

cd `dirname $0`
cur=$PWD

# the temp folder to store distribution source code...
TEMP=`mktemp -d ${TMPDIR-/tmp}/distribution.XXXXXX`
git clone -b $VERSION https://github.com/distribution/distribution.git $TEMP

cd $TEMP

# add GC patch
echo 'add patch https://github.com/nikhil-ch-rzp/distribution/pull/1...'
wget https://github.com/nikhil-ch-rzp/distribution/pull/1.patch
git apply 1.patch

# add patch 3599 to update AWS SDK
echo 'add patch https://github.com/distribution/distribution/pull/3599 ...'
wget https://github.com/distribution/distribution/pull/3599.patch
git apply 3599.patch

# add patch 3921 for IRSA
echo 'add patch https://github.com/distribution/distribution/pull/3921 ...'
wget https://github.com/distribution/distribution/pull/3921.patch
git apply 3921.patch

# add patch redis
git apply $cur/redis.patch
cd $cur

echo 'build the registry binary ...'
cp Dockerfile.binary $TEMP

TARGETARCH=("amd64" "arm64")
TARGETOS="linux"

for arch in "${TARGETARCH[@]}"; do
  echo "${TARGETOS}/${arch} binary"
  docker build --build-arg GOARCH=${arch} --build-arg GOOS=${TARGETOS} -f $TEMP/Dockerfile.binary -t registry-golang-${arch} $TEMP

  echo 'copy the registry binary to local...'
  ID=$(docker create registry-golang-${arch})
  docker cp $ID:/go/src/github.com/docker/distribution/bin/registry binary/registry-${TARGETOS}-${arch}

  docker rm -f $ID
  docker rmi -f registry-golang-${arch}
done

echo "Build registry binary success, then to build photon image..."
cd $cur
cp $TEMP/cmd/registry/config-example.yml config.yml
rm -rf $TEMP
